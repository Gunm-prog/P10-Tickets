{
	"info": {
		"_postman_id": "aaaa7d55-597d-4efa-8011-308bbcee8463",
		"name": "Lib10_testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentications",
			"item": [
				{
					"name": "with_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"jwtAdminToken\", pm.response.json()[0])\r",
									"//    console.log(pm.response.json());\r",
									" //   postman.setNextRequest(\"testNext\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"moi@moi.moi\",\r\n    \"password\": \"Zokori61\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/authenticate",
							"host": [
								"{{host}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API CRUD scenarii tests",
			"item": [
				{
					"name": "log_admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"jwtAdminToken\", pm.response.json()[0])\r",
									"//    console.log(pm.response.json());\r",
									" //   postman.setNextRequest(\"testNext\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"moi@moi.moi\",\r\n    \"password\": \"Zokori61\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/authenticate",
							"host": [
								"{{host}}"
							],
							"path": [
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "customer CRUD scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//post create address param missing\r",
									"pm.test(\"Bad request\", function () {\r",
									"    pm.response.to.have.body(\"Address not found\");\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"//rebuild post create request\r",
									"    const postRequest = {\r",
									"        url: pm.environment.get(\"host\") + \"/register/customer\",\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"lastName\":\"testApi lastname\",\r",
									"                \"firstName\":\"testAPI firstname\",\r",
									"                \"email\":\"test@postman.com\",\r",
									"                \"password\":\"password\",\r",
									"                \"addressDto\":{\r",
									"                    \"number\":7,\r",
									"                    \"street\":\"road Danton\",\r",
									"                    \"zipCode\":59240,\r",
									"                    \"city\":\"Dunkirk\"\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"//post create user sucess, sending\r",
									"console.log(\"send request for create success\")\r",
									"    pm.sendRequest(postRequest, (error, response) => {\r",
									"        if(error){ console.log(error)};\r",
									"        pm.test(\"Create success\", function (){\r",
									"            //response.to.have.status(201)\r",
									"            pm.expect(response).to.have.property('code', 201);\r",
									"            var jsonData = response.json();\r",
									"            pm.variables.set(\"userId\", jsonData.userId);\r",
									"\r",
									"//post create user duplicate exception, resending\r",
									"console.log(\"send request for duplicate exception\")\r",
									"            pm.sendRequest(postRequest, (error, response) => {\r",
									"                if(error){ console.log(error)};\r",
									"                pm.test(\"duplicate exception\", function(){\r",
									"                    pm.expect(response).to.have.property('code', 409);\r",
									"                //    pm.expect(response).to.have.status(409);\r",
									"                    pm.expect(response).to.have.body(\"Email already exists\");\r",
									"                //  response.to.have.body(\"Email already exists\");\r",
									"                })\r",
									"            })\r",
									"\r",
									"//build post login the user\r",
									"            const loginRequest = {\r",
									"                url : pm.environment.get(\"host\") + \"/authenticate\",\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json'\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                        \"username\": \"test@postman.com\",\r",
									"                        \"password\": \"password\"\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"            \r",
									"//post login the user, sending\r",
									"console.log(\"send request user login\")\r",
									"            pm.sendRequest(loginRequest, (error, response) => {\r",
									"                    if(error){ console.log(error)};\r",
									"                    pm.test(\"login with new user\", function(){\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        var jsonData = response.json()\r",
									"                        pm.variables.set(\"jwtToken\", jsonData[0]);\r",
									"\r",
									"//build putRequest\r",
									"\r",
									"                        const putRequest = {\r",
									"                            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/update\",\r",
									"                            method: \"PUT\",\r",
									"                            header: {\r",
									"                                'Content-Type': 'application/json',\r",
									"                                'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                            },\r",
									"                            body: {\r",
									"                                mode: 'raw',\r",
									"                                raw: JSON.stringify({\r",
									"                                    \"userId\": pm.variables.get(\"userId\"),\r",
									"                                    \"lastName\":\"lastname update\",\r",
									"                                    \"firstName\":\"firstname update\",\r",
									"                                    \"addressDto\":{\r",
									"                                        \"number\": 1010,\r",
									"                                        \"street\":\"Liem\",\r",
									"                                        \"zipCode\":59740,\r",
									"                                        \"city\":\"Dunkirk\"\r",
									"                                    }\r",
									"                                })\r",
									"                            }\r",
									"                        }\r",
									"\r",
									"//put request, sending\r",
									"console.log(\"send request put user\")\r",
									"                        pm.sendRequest(putRequest, (error, response) => {\r",
									"                            if(error){ console.log(error)};\r",
									"\r",
									"                            pm.test(\"update success\", function(){\r",
									"                                pm.expect(response).to.have.property('code', 200);\r",
									"\r",
									"//build get the user\r",
									"                                const getRequest = {\r",
									"                                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/\" + pm.variables.get(\"userId\"),\r",
									"                                    method: 'GET',\r",
									"                                    header: {\r",
									"                                        'Content-Type': 'application/json',\r",
									"                                        'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                                    }\r",
									"                                }\r",
									"//get the user, sending\r",
									"console.log(\"send request get user\")\r",
									"                                pm.sendRequest(getRequest, (error, response) => {\r",
									"                                     if(error){ console.log(error)};\r",
									"\r",
									"                                    pm.test(\"get the user\", function(){\r",
									"                                        pm.expect(response).to.have.property('code', 200);\r",
									"                                    })\r",
									"\r",
									"                                    pm.test(\"check updated data\", function(){\r",
									"                                        var jsonData = response.json();\r",
									"                                        pm.expect(\"lastname update\").to.equals(jsonData.lastName)\r",
									"                                        pm.expect(\"firstname update\").to.equals(jsonData.firstName)\r",
									"                                        pm.expect(1010).to.equals(jsonData.addressDto.number)\r",
									"                                        pm.expect(\"Liem\").to.equals(jsonData.addressDto.street)\r",
									"                                        pm.expect(\"59740\").to.equals(jsonData.addressDto.zipCode)\r",
									"                                        pm.expect(\"Dunkirk\").to.equals(jsonData.addressDto.city)\r",
									"                                    })\r",
									"\r",
									"//Build Delete user for notFoundException\r",
									"                                    const deleteRequest = {\r",
									"                                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/delete/0\",\r",
									"                                        method: 'DELETE',\r",
									"                                        header: {\r",
									"                                            'Content-Type': 'application/json',\r",
									"                                            'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                                        }\r",
									"                                    }\r",
									"//delete user for not found exception, sending\r",
									"console.log(\"send request delete user for not found exception\")\r",
									"                                    pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                                        if(error){ console.log(error)};\r",
									"\r",
									"                                        pm.test(\"delete user with notFound exception\", function(){\r",
									"                                        pm.expect(response).to.have.property('code', 404);\r",
									"\r",
									"//rebuild request for delete the new user\r",
									"                                        deleteRequest.url = pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/delete/\" + pm.variables.get(\"userId\")\r",
									"//delete new user , sending\r",
									"console.log(\"send request delete user for success\")\r",
									"                                        pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                                            if(error){ console.log(error)};\r",
									"\r",
									"                                            pm.test(\"delete new user\", function(){\r",
									"                                                pm.expect(response).to.have.property('code', 200);\r",
									"                                            })\r",
									"                                        })\r",
									"                                    })\r",
									"                                    })\r",
									"                               })\r",
									"                             });\r",
									"                         })\r",
									"                         \r",
									"                     })\r",
									"\r",
									"                })\r",
									"        })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\":\"testApi lastname\",\r\n    \"firstName\":\"testAPI firstname\",\r\n    \"email\":\"test@postman.com\",\r\n    \"password\":\"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/register/customer",
							"host": [
								"{{host}}"
							],
							"path": [
								"register",
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "employee CRUD scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//post create address param missing\r",
									"pm.test(\"Bad request\", function () {\r",
									"    pm.response.to.have.body(\"Address not found\");\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"//rebuild post create request\r",
									"    const postRequest = {\r",
									"        url: pm.environment.get(\"host\") + \"/register/employee\",\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"lastName\":\"testApi lastname\",\r",
									"                \"firstName\":\"testAPI firstname\",\r",
									"                \"email\":\"test@postman.com\",\r",
									"                \"password\":\"password\",\r",
									"                \"addressDto\":{\r",
									"                    \"number\":7,\r",
									"                    \"street\":\"road Danton\",\r",
									"                    \"zipCode\":59240,\r",
									"                    \"city\":\"Dunkirk\"\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"//post create user sucess, sending\r",
									"console.log(\"send request for create success\")\r",
									"    pm.sendRequest(postRequest, (error, response) => {\r",
									"        if(error){ console.log(error)};\r",
									"        pm.test(\"Create success\", function (){\r",
									"            //response.to.have.status(201)\r",
									"            pm.expect(response).to.have.property('code', 201);\r",
									"            var jsonData = response.json();\r",
									"            pm.variables.set(\"userId\", jsonData.userId);\r",
									"\r",
									"//post create user duplicate exception, resending\r",
									"console.log(\"send request for duplicate exception\")\r",
									"            pm.sendRequest(postRequest, (error, response) => {\r",
									"                if(error){ console.log(error)};\r",
									"                pm.test(\"duplicate exception\", function(){\r",
									"                    pm.expect(response).to.have.property('code', 409);\r",
									"                //    pm.expect(response).to.have.status(409);\r",
									"                    pm.expect(response).to.have.body(\"Email already exists\");\r",
									"                //  response.to.have.body(\"Email already exists\");\r",
									"                })\r",
									"            })\r",
									"\r",
									"//build post login the user\r",
									"            const loginRequest = {\r",
									"                url : pm.environment.get(\"host\") + \"/authenticate\",\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json'\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                        \"username\": \"test@postman.com\",\r",
									"                        \"password\": \"password\"\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"            \r",
									"//post login the user, sending\r",
									"console.log(\"send request user login\")\r",
									"            pm.sendRequest(loginRequest, (error, response) => {\r",
									"                    if(error){ console.log(error)};\r",
									"                    pm.test(\"login with new user\", function(){\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        var jsonData = response.json()\r",
									"                        pm.variables.set(\"jwtToken\", jsonData[0]);\r",
									"\r",
									"//build putRequest\r",
									"\r",
									"                        const putRequest = {\r",
									"                            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/update\",\r",
									"                            method: \"PUT\",\r",
									"                            header: {\r",
									"                                'Content-Type': 'application/json',\r",
									"                                'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                            },\r",
									"                            body: {\r",
									"                                mode: 'raw',\r",
									"                                raw: JSON.stringify({\r",
									"                                    \"userId\": pm.variables.get(\"userId\"),\r",
									"                                    \"lastName\":\"lastname update\",\r",
									"                                    \"firstName\":\"firstname update\",\r",
									"                                    \"addressDto\":{\r",
									"                                        \"number\": 1010,\r",
									"                                        \"street\":\"Liem\",\r",
									"                                        \"zipCode\":59740,\r",
									"                                        \"city\":\"Dunkirk\"\r",
									"                                    }\r",
									"                                })\r",
									"                            }\r",
									"                        }\r",
									"\r",
									"//put request, sending\r",
									"console.log(\"send request put user\")\r",
									"                        pm.sendRequest(putRequest, (error, response) => {\r",
									"                            if(error){ console.log(error)};\r",
									"\r",
									"                            pm.test(\"update success\", function(){\r",
									"                                pm.expect(response).to.have.property('code', 200);\r",
									"\r",
									"//build get the user\r",
									"                                const getRequest = {\r",
									"                                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/\" + pm.variables.get(\"userId\"),\r",
									"                                    method: 'GET',\r",
									"                                    header: {\r",
									"                                        'Content-Type': 'application/json',\r",
									"                                        'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                                    }\r",
									"                                }\r",
									"//get the user, sending\r",
									"console.log(\"send request get user\")\r",
									"                                pm.sendRequest(getRequest, (error, response) => {\r",
									"                                     if(error){ console.log(error)};\r",
									"\r",
									"                                    pm.test(\"get the user\", function(){\r",
									"                                        pm.expect(response).to.have.property('code', 200);\r",
									"                                    })\r",
									"\r",
									"                                    pm.test(\"check updated data\", function(){\r",
									"                                        var jsonData = response.json();\r",
									"                                        pm.expect(\"lastname update\").to.equals(jsonData.lastName)\r",
									"                                        pm.expect(\"firstname update\").to.equals(jsonData.firstName)\r",
									"                                        pm.expect(1010).to.equals(jsonData.addressDto.number)\r",
									"                                        pm.expect(\"Liem\").to.equals(jsonData.addressDto.street)\r",
									"                                        pm.expect(\"59740\").to.equals(jsonData.addressDto.zipCode)\r",
									"                                        pm.expect(\"Dunkirk\").to.equals(jsonData.addressDto.city)\r",
									"                                    })\r",
									"\r",
									"//Build Delete user for notFoundException\r",
									"                                    const deleteRequest = {\r",
									"                                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/delete/0\",\r",
									"                                        method: 'DELETE',\r",
									"                                        header: {\r",
									"                                            'Content-Type': 'application/json',\r",
									"                                            'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                                        }\r",
									"                                    }\r",
									"//delete user for not found exception, sending\r",
									"console.log(\"send request delete user for not found exception\")\r",
									"                                    pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                                        if(error){ console.log(error)};\r",
									"\r",
									"                                        pm.test(\"delete user with notFound exception\", function(){\r",
									"                                        pm.expect(response).to.have.property('code', 404);\r",
									"\r",
									"//rebuild request for delete the new user\r",
									"                                        deleteRequest.url = pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/users/delete/\" + pm.variables.get(\"userId\")\r",
									"//delete new user , sending\r",
									"console.log(\"send request delete user for success\")\r",
									"                                        pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                                            if(error){ console.log(error)};\r",
									"\r",
									"                                            pm.test(\"delete new user\", function(){\r",
									"                                                pm.expect(response).to.have.property('code', 200);\r",
									"                                            })\r",
									"                                        })\r",
									"                                    })\r",
									"                                    })\r",
									"                               })\r",
									"                             });\r",
									"                         })\r",
									"                         \r",
									"                     })\r",
									"\r",
									"                })\r",
									"        })\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\":\"testApi lastname\",\r\n    \"firstName\":\"testAPI firstname\",\r\n    \"email\":\"test@postman.com\",\r\n    \"password\":\"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/register/customer",
							"host": [
								"{{host}}"
							],
							"path": [
								"register",
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "librairy CRUD scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//post create address param missing\r",
									"pm.test(\"Bad request\", function () {\r",
									"    pm.response.to.have.body(\"Address not found\");\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"    //rebuild post create request\r",
									"    const postRequest = {\r",
									"        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/newLibrary\",\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"name\":\"postman library\",\r",
									"                \"phoneNumber\":\"07-25-45-68-95\",\r",
									"                \"addressDto\":{\r",
									"                    \"number\":7,\r",
									"                    \"street\":\"road Danton\",\r",
									"                    \"zipCode\":59240,\r",
									"                    \"city\":\"Dunkirk\"\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"//post create library sucess, sending\r",
									"console.log(\"send request for create success\")\r",
									"    pm.sendRequest(postRequest, (error, response) => {\r",
									"        if(error){ console.log(error)};\r",
									"        pm.test(\"Create success\", function (){\r",
									"            pm.expect(response).to.have.property('code', 201);\r",
									"            var jsonData = response.json();\r",
									"            pm.variables.set(\"libraryId\", jsonData.libraryId);\r",
									"        })\r",
									"\r",
									"//build put request\r",
									"        const putRequest = {\r",
									"            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/updateLibrary\",\r",
									"            method: \"PUT\",\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"libraryId\": pm.variables.get(\"libraryId\"),\r",
									"                    \"name\":\"postman library updated\",\r",
									"                    \"phoneNumber\":\"09-25-45-68-95\",\r",
									"                    \"addressDto\":{\r",
									"                        \"number\": 1010,\r",
									"                        \"street\":\"Liem\",\r",
									"                        \"zipCode\":59740,\r",
									"                        \"city\":\"Dunkirk\"\r",
									"                    }\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"//put request, sending\r",
									"console.log(\"send request put user\")\r",
									"        pm.sendRequest(putRequest, (error, response) => {\r",
									"            if(error){ console.log(error)};\r",
									"\r",
									"            pm.test(\"update success\", function(){\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"\r",
									"//Build get library request\r",
									"\r",
									"                 const getRequest = {\r",
									"                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/\" + pm.variables.get(\"libraryId\"),\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                }\r",
									"//get request library, sending\r",
									"console.log(\"send request get by id library\")\r",
									"\r",
									"                pm.sendRequest(getRequest, (error, response) => {\r",
									"                     if(error){ console.log(error)};\r",
									"\r",
									"                      pm.test(\"get the library\", function(){\r",
									"                            pm.expect(response).to.have.property('code', 200);\r",
									"                        })\r",
									"\r",
									"                    pm.test(\"check updated data\", function(){\r",
									"                        var jsonData = response.json();\r",
									"                        pm.expect(\"postman library updated\").to.equals(jsonData.name)\r",
									"                        pm.expect(\"09-25-45-68-95\").to.equals(jsonData.phoneNumber)\r",
									"                        pm.expect(1010).to.equals(jsonData.addressDto.number)\r",
									"                        pm.expect(\"Liem\").to.equals(jsonData.addressDto.street)\r",
									"                        pm.expect(\"59740\").to.equals(jsonData.addressDto.zipCode)\r",
									"                        pm.expect(\"Dunkirk\").to.equals(jsonData.addressDto.city)\r",
									"                    })\r",
									"\r",
									"//Build Delete library for notFoundException\r",
									"                    const deleteRequest = {\r",
									"                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/delete/0\",\r",
									"                        method: 'DELETE',\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json',\r",
									"                            'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                        }\r",
									"                    }\r",
									"//delete library for not found exception, sending\r",
									"console.log(\"send request delete library for not found exception\")\r",
									"                    pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                        if(error){ console.log(error)};\r",
									"\r",
									"                        pm.test(\"delete library with notFound exception\", function(){\r",
									"                            pm.expect(response).to.have.property('code', 404);\r",
									"\r",
									"//rebuild request for delete the new library\r",
									"                            deleteRequest.url = pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/delete/\" + pm.variables.get(\"libraryId\")\r",
									"//delete new library , sending\r",
									"console.log(\"send request delete library for success\")\r",
									"                            pm.sendRequest(deleteRequest, (error, response) => {\r",
									"                                if(error){ console.log(error)};\r",
									"\r",
									"                                pm.test(\"delete new library\", function(){\r",
									"                                    pm.expect(response).to.have.property('code', 200);\r",
									"                                })\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"postman library\",\r\n    \"phoneNumber\":\"07-25-45-68-95\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/libraries/newLibrary",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"libraries",
								"newLibrary"
							]
						}
					},
					"response": []
				},
				{
					"name": "author CRUD scenario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Create success\", function (){\r",
									"    pm.response.to.have.property('code', 201);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.variables.set(\"authorId\", jsonData.authorId);\r",
									"\r",
									"//pm.setNextRequest(\"with_admin\")\r",
									"//todo get\r",
									"    pm.sendRequest(pm.request, (error, response)=>{\r",
									"        if(error){console.log(error)}\r",
									"        pm.test(\"can't duplicate author\", function(){\r",
									"            pm.expect(response).to.have.status(409) \r",
									"            const getAuthor = {\r",
									"                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/\" + pm.variables.get(\"authorId\"),\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json',\r",
									"                    'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                }\r",
									"            }\r",
									"            pm.sendRequest(getAuthor, (error, response) => {\r",
									"                if(error){console.log(error)}\r",
									"                pm.test(\"get author\", function (){\r",
									"                    pm.expect(response).to.have.status(200)\r",
									"                    const putAuthor = {\r",
									"                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/updateAuthor\",\r",
									"                        method: 'PUT',\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json',\r",
									"                            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                        },\r",
									"                        body: {\r",
									"                            mode: 'raw',\r",
									"                            raw: JSON.stringify({\r",
									"                                \"authorId\":pm.variables.get(\"authorId\"),\r",
									"                                \"firstName\":\"Postman updated\",\r",
									"                                \"lastName\":\"For test updated\"\r",
									"                            })\r",
									"                        }\r",
									"                    }\r",
									"                    pm.sendRequest(putAuthor, (error, response)=>{\r",
									"                        if(error){console.log(error)}\r",
									"                        pm.test(\"put author\", function(){\r",
									"                            pm.expect(response).to.have.status(200)\r",
									"                            var jsonData = response.json();\r",
									"                            pm.expect(\"Postman updated\").to.equals(jsonData.firstName)\r",
									"                            pm.expect(\"For test updated\").to.equals(jsonData.lastName)\r",
									"\r",
									"                            const deleteAuthor = {\r",
									"                                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/delete/\" + pm.variables.get(\"authorId\"),\r",
									"                                method: 'DELETE',\r",
									"                                header: {\r",
									"                                    'Content-Type': 'application/json',\r",
									"                                    'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                                },\r",
									"                            }\r",
									"                            pm.sendRequest(deleteAuthor, (error, response)=>{\r",
									"                                if(error){console.log(error)}\r",
									"                                pm.test(\"deleteAuthor\", function(){\r",
									"                                    pm.expect(response).to.have.status(200)\r",
									"                                })\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtAdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\":\"Postman\",\r\n    \"lastName\":\"For test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/authors/newAuthor",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"authors",
								"newAuthor"
							]
						}
					},
					"response": []
				},
				{
					"name": "book CRUD scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const createAuthor = {\r",
									"    url : pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/newAuthor\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"firstName\":\"Postman\",\r",
									"                \"lastName\":\"For test\"\r",
									"            })\r",
									"        }\r",
									"}\r",
									"\r",
									"pm.sendRequest(createAuthor, (error, response) => {\r",
									"    if(error){console.log(error)};\r",
									"    pm.variables.set(\"authorId\",response.json().authorId)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" //post create with author param missing\r",
									"pm.test(\"Bad request, missing auhtor param\", function () {\r",
									"    pm.response.to.have.body(\"author is required\");\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"//build post create request, with an non-existent author\r",
									"    const postRequest = {\r",
									"        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/newBook\",\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"title\": \"Postman testBook\",\r",
									"                \"isbn\":\"9999\",\r",
									"                \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                \"authorDto\":{\r",
									"                    \"authorId\":0\r",
									"                }\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"//post create with non-existent author, sending\r",
									"console.log(\"send request for non-existent author\")\r",
									"    pm.sendRequest(postRequest, (error, response) => {\r",
									"        if(error){ console.log(error)};\r",
									"        pm.test(\"non-existent author\", function(){\r",
									"            pm.expect(response).to.have.property('code', 404);\r",
									"            pm.expect(response).to.have.body(\"author 0 not found\");\r",
									"\r",
									"//rebuild for create success\r",
									"            postRequest.body.raw = JSON.stringify({\r",
									"                \"title\": \"Postman testBook\",\r",
									"                \"isbn\":\"9999\",\r",
									"                \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                \"authorDto\":{\r",
									"                    \"authorId\": pm.variables.get(\"authorId\")\r",
									"                }\r",
									"            })\r",
									"\r",
									"//post create success author, sending\r",
									"console.log(\"send request create with success\")\r",
									"            pm.sendRequest(postRequest, (error, response) => {\r",
									"                if(error){ console.log(error)};\r",
									"                pm.test(\"create with success\", function(){\r",
									"                    pm.expect(response).to.have.property('code', 201);\r",
									"                    pm.variables.set(\"bookId\", response.json().bookId)\r",
									"\r",
									"                    const getBook = {\r",
									"                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/\" + pm.variables.get(\"bookId\"),\r",
									"                        method: 'GET',\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json',\r",
									"                            'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                        }\r",
									"                    }\r",
									"                    pm.sendRequest(getBook, (error, response)=>{\r",
									"                        if(error){console.log(error)}\r",
									"                        pm.test(\"get book\", function(){\r",
									"                            pm.expect(response).to.have.status(200)\r",
									"                            var jsonData = response.json()\r",
									"                            pm.expect(\"Postman testBook\").to.equals(jsonData.title)\r",
									"                            pm.expect(\"9999\").to.equals(jsonData.isbn)\r",
									"                            pm.expect(\"Just a book for testing Api with Postman\").to.equals(jsonData.summary)\r",
									"                            pm.expect(pm.variables.get(\"authorId\")).to.equals(jsonData.authorDto.authorId)\r",
									"\r",
									"                            const putBook = {\r",
									"                                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/\" + pm.variables.get(\"bookId\"),\r",
									"                                method: 'PUT',\r",
									"                                header: {\r",
									"                                    'Content-Type': 'application/json',\r",
									"                                    'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                                },\r",
									"                                body: {\r",
									"                                    mode: 'raw',\r",
									"                                    raw: JSON.stringify({\r",
									"                                        \"bookId\": pm.variables.get(\"bookId\"),\r",
									"                                        \"title\": \"Postman testBook updated\",\r",
									"                                        \"isbn\":\"9999\",\r",
									"                                        \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                                        \"authorDto\":{\r",
									"                                            \"authorId\":0\r",
									"                                        }\r",
									"                                    })\r",
									"                                }\r",
									"                            }\r",
									"                            pm.sendRequest(putBook, (error, response)=>{\r",
									"                                if(error){console.log(error)}\r",
									"                                pm.test(\"update book\", function(){\r",
									"                                    pm.expect(response).to.have.status(200)\r",
									"                                    pm.expect(\"Postman testBook updated\").to.equals(response.json().title)\r",
									"        \r",
									"                                    const deleteAuthor = {\r",
									"                                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/delete/\" + pm.variables.get(\"authorId\"),\r",
									"                                        method: 'DELETE',\r",
									"                                        header: {\r",
									"                                            'Content-Type': 'application/json',\r",
									"                                            'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                                        }\r",
									"                                    }\r",
									"                                    pm.sendRequest(deleteAuthor, (error, response) => { \r",
									"                                        if(error){console.log(error)}\r",
									"                                        pm.test(\"can't delete author with book(s)\", function(){\r",
									"                                            pm.expect(response).to.have.status(409)\r",
									"                                            pm.expect(response).to.have.body(\"This author \" + pm.variables.get(\"authorId\") + \" have existing books\")\r",
									"\r",
									"                                            const deleteBook = {\r",
									"                                                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/delete/\" + pm.variables.get(\"bookId\"),\r",
									"                                                method: 'DELETE',\r",
									"                                                header: {\r",
									"                                                    'Content-Type': 'application/json',\r",
									"                                                    'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                                                }\r",
									"                                            }\r",
									"                                            pm.sendRequest(deleteBook, (error, response)=>{\r",
									"                                                if(error){console.log(error)}\r",
									"                                                pm.test(\"delete book\", function(){\r",
									"                                                    pm.expect(response).to.have.status(200)\r",
									"\r",
									"                                                    pm.sendRequest(deleteAuthor, (error, response)=>{\r",
									"                                                        if(error){console.log(error)}\r",
									"                                                        pm.test(\"delete author\", function(){\r",
									"                                                            pm.expect(response).to.have.status(200)\r",
									"                                                        })\r",
									"                                                    })\r",
									"                                                })\r",
									"                                            })\r",
									"                                        })\r",
									"                                    })\r",
									"                                })\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Postman testBook\",\r\n    \"isbn\":9999,\r\n    \"summary\":\"Just a book for testing Api with Postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/books/newBook",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"books",
								"newBook"
							]
						}
					},
					"response": []
				},
				{
					"name": "copy CRUD scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const loginAdmin = {\r",
									"    url: pm.environment.get(\"host\") + \"/authenticate\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": pm.environment.get(\"adminEmail\"),\r",
									"            \"password\": pm.environment.get(\"adminPass\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(loginAdmin, (error, response) => {\r",
									"    pm.collectionVariables.set(\"jwtAdminToken\", response.json()[0])\r",
									"})\r",
									"\r",
									"\r",
									"const postLibrary = {\r",
									"    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/newLibrary\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"name\":\"postman library\",\r",
									"            \"phoneNumber\":\"0725456895\",\r",
									"            \"addressDto\":{\r",
									"                \"number\":7,\r",
									"                \"street\":\"road Danton\",\r",
									"                \"zipCode\":59240,\r",
									"                \"city\":\"Dunkirk\"\r",
									"            }\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postLibrary, (error, response) => {\r",
									"    if(error){console.log(error)}\r",
									"    pm.test(\"create a library\", function(){\r",
									"        pm.expect(response).to.have.property(\"code\",201)\r",
									"        pm.variables.set(\"libraryId\", response.json().libraryId)\r",
									"    })\r",
									"})\r",
									"\r",
									"const postAuthor = {\r",
									"    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/newAuthor\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstName\":\"Postman\",\r",
									"            \"lastName\":\"For test\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postAuthor, (error, response) => {\r",
									"    if(error){console.log(error)}\r",
									"    pm.test(\"create an author\", function(){\r",
									"        pm.expect(response).to.have.property(\"code\", 201)\r",
									"        pm.variables.set(\"authorId\", response.json().authorId)\r",
									"\r",
									"        const postBook = {\r",
									"            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/newBook\",\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"title\": \"Postman testBook\",\r",
									"                    \"isbn\":9999,\r",
									"                    \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                    \"authorDto\":{\r",
									"                        \"authorId\":pm.variables.get(\"authorId\")\r",
									"                    }\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postBook, (error, response) => {\r",
									"            if(error){console.log(error)}\r",
									"            pm.test(\"create a book\", function(){\r",
									"                pm.expect(response).to.have.property(\"code\", 201)\r",
									"                pm.variables.set(\"bookId\", response.json().bookId)\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"missing book param\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.body(\"book param is required\");\r",
									"})\r",
									"\r",
									"pm.test(\"check if the necessary data is initialized\", function() {\r",
									"     pm.expect(pm.variables.has('libraryId')).to.equal(true);\r",
									"     pm.expect(pm.variables.has('authorId')).to.equal(true);\r",
									"     pm.expect(pm.variables.has('bookId')).to.equal(true);\r",
									"\r",
									"    const postCopy = {\r",
									"        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/copies/newCopy\",\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"               \"available\":1,\r",
									"               \"bookDto\":{\r",
									"                   \"bookId\": pm.variables.get(\"bookId\")\r",
									"               }\r",
									"            })\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.sendRequest(postCopy, (error, response) => {\r",
									"        if(error){console.log(error)}\r",
									"        pm.test(\"missing library param\", function(){\r",
									"            pm.expect(response).to.have.status(404)\r",
									"            pm.expect(response).to.have.body(\"library param is required\")\r",
									"\r",
									"            postCopy.body.raw = JSON.stringify({\r",
									"               \"available\":1,\r",
									"               \"bookDto\":{\r",
									"                   \"bookId\": pm.variables.get(\"bookId\")\r",
									"               },\r",
									"               \"libraryDto\":{\r",
									"                   \"libraryId\": pm.variables.get(\"libraryId\")\r",
									"               }\r",
									"            })\r",
									"\r",
									"            pm.sendRequest(postCopy, (error, response) => {\r",
									"                if(error){console.log(error)}\r",
									"                pm.test(\"create copy success\", function(){\r",
									"                    pm.expect(response).to.have.property(\"code\", 201)\r",
									"                    pm.variables.set(\"copyId\", response.json().id)\r",
									"           //     })\r",
									"                const deleteTable = [\r",
									"                    {name:\"copy\", endPoint:\"/copies/delete/\", id:pm.variables.get(\"copyId\")},\r",
									"                    {name:\"book\", endPoint:\"/books/delete/\", id:pm.variables.get(\"bookId\")},\r",
									"                    {name:\"author\", endPoint:\"/authors/delete/\", id:pm.variables.get(\"authorId\")},\r",
									"                    {name:\"library\", endPoint:\"/libraries/delete/\", id:pm.variables.get(\"libraryId\")}\r",
									"                ]\r",
									"                 //   })\r",
									"\r",
									"                 //   for(var i=0; i<deleteTable.length-1; i++){\r",
									"                        function buildDeleteRequest(e){\r",
									"                            return deleteRequest = {\r",
									"                                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + e.endPoint + e.id,\r",
									"                                method: 'DELETE',\r",
									"                                header: {\r",
									"                                    'Content-Type': 'application/json',\r",
									"                                    'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"\r",
									"                        pm.sendRequest(buildDeleteRequest(deleteTable[1]), (error, response) => {\r",
									"                        if(error){console.log(error)}\r",
									"                        pm.test(\"unauthorized delete book with copies\", function(){\r",
									"                            pm.expect(response).to.have.status(409)\r",
									"                            pm.expect(response).to.have.body(\"This book \" + pm.variables.get(\"bookId\") + \" have existing copy\")\r",
									"                  //      })\r",
									"\r",
									"                            function sendDelete(index, maxIndex){\r",
									"                                console.log(index)\r",
									"                                console.log(deleteTable[index].name)\r",
									"                                pm.sendRequest(buildDeleteRequest(deleteTable[index]), (error, response) => {\r",
									"                                    testDelete(error, response, deleteTable[index].name, index, maxIndex)\r",
									"                                })\r",
									"                            }\r",
									"                            function testDelete(err, res, name, index, maxIndex){\r",
									"                                if(err){console.log(err)}\r",
									"                                pm.test(\"delete \" + name, function(){\r",
									"                                    pm.expect(res).to.have.property(\"code\",200)\r",
									"                                    if(index < maxIndex){\r",
									"                                        sendDelete(index+1, maxIndex)\r",
									"                                    }\r",
									"                                })\r",
									"                            }\r",
									"                            sendDelete(0,deleteTable.length-1)\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtAdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/copies/newCopy",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"copies",
								"newCopy"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan CRUD scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const loginAdmin = {\r",
									"    url: pm.environment.get(\"host\") + \"/authenticate\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": pm.environment.get(\"adminEmail\"),\r",
									"            \"password\": pm.environment.get(\"adminPass\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(loginAdmin, (error, response) => {\r",
									"    pm.collectionVariables.set(\"jwtAdminToken\", response.json()[0])\r",
									"})\r",
									"\r",
									"const postCustomer = {\r",
									"    url: pm.environment.get(\"host\") + \"/register/customer\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"lastName\":\"testApi lastname\",\r",
									"            \"firstName\":\"testAPI firstname\",\r",
									"            \"email\":\"test@postman.com\",\r",
									"            \"password\":\"password\",\r",
									"            \"addressDto\":{\r",
									"                \"number\":7,\r",
									"                \"street\":\"road Danton\",\r",
									"                \"zipCode\":59240,\r",
									"                \"city\":\"Dunkirk\"\r",
									"            }\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postCustomer, (error, response) => {\r",
									"    if(error){console.log(error)}\r",
									"    pm.test(\"create customer\", function(){\r",
									"        pm.expect(response).to.have.status(201)\r",
									"        pm.variables.set(\"userId\", response.json().userId)\r",
									"\r",
									"        const loginAdmin = {\r",
									"            url: pm.environment.get(\"host\") + \"/authenticate\",\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"username\": \"test@postman.com\",\r",
									"                    \"password\": \"password\"\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        pm.sendRequest(loginAdmin, (error, response) => {\r",
									"            pm.collectionVariables.set(\"jwtToken\", response.json()[0])\r",
									"        })\r",
									"    })\r",
									"})\r",
									"\r",
									"const postLibrary = {\r",
									"    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/newLibrary\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"name\":\"postman library\",\r",
									"            \"phoneNumber\":\"0725456895\",\r",
									"            \"addressDto\":{\r",
									"                \"number\":7,\r",
									"                \"street\":\"road Danton\",\r",
									"                \"zipCode\":59240,\r",
									"                \"city\":\"Dunkirk\"\r",
									"            }\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postLibrary, (error, response) => {\r",
									"    if(error){console.log(error)}\r",
									"    pm.test(\"create a library\", function(){\r",
									"        pm.expect(response).to.have.property(\"code\",201)\r",
									"        pm.variables.set(\"libraryId\", response.json().libraryId)\r",
									"\r",
									"\r",
									"        const postAuthor = {\r",
									"            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/newAuthor\",\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"firstName\":\"Postman\",\r",
									"                    \"lastName\":\"For test\"\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postAuthor, (error, response) => {\r",
									"            if(error){console.log(error)}\r",
									"            pm.test(\"create an author\", function(){\r",
									"                pm.expect(response).to.have.property(\"code\", 201)\r",
									"                pm.variables.set(\"authorId\", response.json().authorId)\r",
									"\r",
									"                const postBook = {\r",
									"                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/newBook\",\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"title\": \"Postman testBook\",\r",
									"                            \"isbn\":9999,\r",
									"                            \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                            \"authorDto\":{\r",
									"                                \"authorId\":pm.variables.get(\"authorId\")\r",
									"                            }\r",
									"                        })\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                pm.sendRequest(postBook, (error, response) => {\r",
									"                    if(error){console.log(error)}\r",
									"                    pm.test(\"create a book\", function(){\r",
									"                        pm.expect(response).to.have.property(\"code\", 201)\r",
									"                        pm.variables.set(\"bookId\", response.json().bookId)\r",
									"\r",
									"                    const postCopy = {\r",
									"                            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/copies/newCopy\",\r",
									"                            method: 'POST',\r",
									"                            header: {\r",
									"                                'Content-Type': 'application/json',\r",
									"                                'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                            },\r",
									"                            body: {\r",
									"                                mode: 'raw',\r",
									"                                raw: JSON.stringify({\r",
									"                                    \"available\":1,\r",
									"                                    \"bookDto\":{\r",
									"                                        \"bookId\": pm.variables.get(\"bookId\")\r",
									"                                    },\r",
									"                                    \"libraryDto\":{\r",
									"                                        \"libraryId\": pm.variables.get(\"libraryId\")\r",
									"                                    }\r",
									"                                })\r",
									"                            }\r",
									"                        } \r",
									"                        pm.sendRequest(postCopy, (error, response)=>{\r",
									"                            if(error){console.log(error)}\r",
									"                            pm.test(\"create copy success\", function(){\r",
									"                                pm.expect(response).to.have.status(201)\r",
									"                                pm.variables.set(\"copyId\", response.json().id)\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"missing customer param\", function(){\r",
									"\r",
									"    if(pm.response.code != 404 ) {endTest = true}\r",
									"    pm.response.to.have.status(404)\r",
									"    pm.response.to.have.body(\"user param is required\")\r",
									"\r",
									"    pm.test(\"check if the necessary data is initialized\", function() {\r",
									"\r",
									"        if(!pm.variables.has(\"userId\") || !pm.variables.has('libraryId') || !pm.variables.has('authorId') || !pm.variables.has('bookId') || !pm.variables.has(\"copyId\")) { \r",
									"            sendDelete(0, deleteTable.length-1) \r",
									"        }\r",
									"        else{\r",
									"            pm.expect(pm.variables.has(\"userId\")).to.equal(true);\r",
									"            pm.expect(pm.variables.has('libraryId')).to.equal(true);\r",
									"            pm.expect(pm.variables.has('authorId')).to.equal(true);\r",
									"            pm.expect(pm.variables.has('bookId')).to.equal(true);\r",
									"            pm.expect(pm.variables.has(\"copyId\")).to.equal(true);\r",
									"\r",
									"            var deleteTable=[\r",
									"                {name:\"copy\", endPoint:\"/copies/delete/\", id:pm.variables.get(\"copyId\")},\r",
									"                {name:\"book\", endPoint:\"/books/delete/\", id:pm.variables.get(\"bookId\")},\r",
									"                {name:\"author\", endPoint:\"/authors/delete/\", id:pm.variables.get(\"authorId\")},\r",
									"                {name:\"library\", endPoint:\"/libraries/delete/\", id:pm.variables.get(\"libraryId\")},\r",
									"                {name:\"user\", endPoint:\"/users/delete/\", id:pm.variables.get(\"userId\")}\r",
									"            ]\r",
									"            function buildDeleteRequest(e){\r",
									"                return {\r",
									"                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + e.endPoint + e.id,\r",
									"                    method: 'DELETE',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"            \r",
									"            function sendDelete(index, maxIndex, needReturnBefore = false){\r",
									"                if(needReturnBefore && deleteTable[index].name == \"loan\"){\r",
									"                    const returnLoan = {\r",
									"                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/loans/return/\" + pm.variables.get(\"loanId\"),\r",
									"                        method: 'PUT',\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json',\r",
									"                            'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                        }\r",
									"                    }\r",
									"                    pm.sendRequest(returnLoan, (error, response)=>{\r",
									"                        if(error){console.log(error)}\r",
									"                        pm.test(\"return loan\", function (){\r",
									"                            pm.expect(response).to.have.status(200)\r",
									"                            sendDelete(index, maxIndex)\r",
									"                        })\r",
									"                    })\r",
									"                }\r",
									"                if(pm.variables.has(deleteTable[index].name + \"Id\") == true){\r",
									"                    pm.sendRequest(buildDeleteRequest(deleteTable[index]), (error, response) => {\r",
									"                        testDelete(error, response, deleteTable[index].name, index, maxIndex)\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"\r",
									"            function testDelete(err, res, name, index, maxIndex){\r",
									"                if(err){console.log(err)}\r",
									"                pm.test(\"delete \" + name, function(){\r",
									"                    pm.expect(res).to.have.property(\"code\",200)\r",
									"                    if(index < maxIndex){\r",
									"                        sendDelete(index+1, maxIndex)\r",
									"                    }\r",
									"                })\r",
									"            }\r",
									"            \r",
									"\r",
									"            const postLoan = {\r",
									"                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/loans/newLoan\",\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json',\r",
									"                    'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                    \"userDto\":{\r",
									"                        \"userId\": pm.variables.get(\"userId\")\r",
									"                    }\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"            pm.sendRequest(postLoan, (error, response) => {\r",
									"                if(error){console.log(error)}\r",
									"                pm.test(\"missing copy param\", function(){\r",
									"                    \r",
									"                    if(response.code != 404 ) {\r",
									"                        sendDelete(0, deleteTable.length-1) \r",
									"                        pm.expect(response).to.have.status(404)\r",
									"                    }\r",
									"                    else{\r",
									"                        pm.expect(response).to.have.status(404)\r",
									"                        pm.expect(response).to.have.body(\"copy param is required\")\r",
									"\r",
									"                        postLoan.body.raw = JSON.stringify({\r",
									"                            \"userDto\":{\r",
									"                                \"userId\": pm.variables.get(\"userId\")\r",
									"                            },\r",
									"                            \"copyDto\":{\r",
									"                                \"id\": pm.variables.get(\"copyId\"),\r",
									"                                \"bookDto\": {\r",
									"                                    \"bookId\": pm.variables.get(\"bookId\")\r",
									"                                }\r",
									"                            } \r",
									"                        })\r",
									"\r",
									"                        pm.sendRequest(postLoan, (error, response) => {\r",
									"                            if(error){console.log(error)}\r",
									"                            pm.test(\"create loan success\", function(){\r",
									"\r",
									"                                if(response.code != 201) { \r",
									"                                    sendDelete(0, deleteTable.length-1) \r",
									"                                    pm.expect(response).to.have.status(201)\r",
									"                                    }\r",
									"                                else {\r",
									"                                    pm.expect(response).to.have.status(201)\r",
									"                                    pm.variables.set(\"loanId\", response.json().id)\r",
									"\r",
									"                                    deleteTable.unshift({name:\"loan\", endPoint:\"/loans/delete/\", id:pm.variables.get(\"loanId\")})\r",
									"\r",
									"                                    //test exception delete not returned\r",
									"                                    pm.sendRequest(buildDeleteRequest(deleteTable[0]), (error, response)=>{\r",
									"                                        if(error){console.log(error)}\r",
									"                                        pm.test(\"can't delete a not returned loan\", function (){\r",
									"\r",
									"                                            if(response.code != 403 ) { \r",
									"                                                sendDelete(0, deleteTable.length-1, true) \r",
									"                                                pm.expect(response).to.have.status(403)\r",
									"                                            }\r",
									"                                            else{\r",
									"                                                pm.expect(response).to.have.status(403)\r",
									"                                                pm.expect(response).to.have.body(\"copy of loan \" + pm.variables.get(\"loanId\") + \" have not been returned\")\r",
									"                                \r",
									"                                                //todo extend loan\r",
									"                                                const extendLoan = {\r",
									"                                                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/loans/extendLoan/\" + pm.variables.get(\"loanId\"),\r",
									"                                                    method: 'PUT',\r",
									"                                                    header: {\r",
									"                                                        'Content-Type': 'application/json',\r",
									"                                                        'Authorization': 'Bearer '+pm.variables.get(\"jwtToken\")\r",
									"                                                    }\r",
									"                                                }\r",
									"                                                pm.sendRequest(extendLoan, (error, response)=>{\r",
									"                                                    if(error){console.log(error)}\r",
									"                                                    pm.test(\"extend loan\", function(){\r",
									"\r",
									"                                                        if(response.code != 200 || response.json().extended != true ) { \r",
									"                                                            sendDelete(0, deleteTable.length-1, true)\r",
									"                                                            pm.expect(response).to.have.status(200)\r",
									"                                                        }\r",
									"                                                        else{\r",
									"                                                            pm.expect(response).to.have.status(200)\r",
									"                                                            pm.expect(true).to.equals(response.json().extended)\r",
									"\r",
									"                                                            //put loan with expired dates and not extended\r",
									"                                                            var jsonData  = response.json();\r",
									"                                                            jsonData.loanStartDate = \"2021-01-01T22:00:00.000+00:00\"\r",
									"                                                            jsonData.loanEndDate = \"2021-02-01T22:00:00.000+00:00\"\r",
									"                                                            jsonData.extended = false\r",
									"                                                            const putLoan = {\r",
									"                                                                url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/loans/updateLoan\",\r",
									"                                                                method: 'PUT',\r",
									"                                                                header: {\r",
									"                                                                    'Content-Type': 'application/json',\r",
									"                                                                    'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                                                                },\r",
									"                                                                body: {\r",
									"                                                                    mode: 'raw',\r",
									"                                                                    raw: JSON.stringify(jsonData)\r",
									"                                                                }\r",
									"                                                            }\r",
									"\r",
									"                                                            pm.sendRequest(putLoan, (error, response)=>{\r",
									"                                                                if(error){console;log(error)}\r",
									"                                                                pm.test(\"update loan\", function (){\r",
									"\r",
									"                                                                    if(response.code != 200 ) { \r",
									"                                                                        sendDelete(0, deleteTable.length-1, true)\r",
									"                                                                        pm.expect(response).to.have.status(200)\r",
									"                                                                    }\r",
									"                                                                    else{\r",
									"                                                                        pm.expect(response).to.have.status(200)\r",
									"\r",
									"                                                                        pm.sendRequest(extendLoan, (error, response)=>{\r",
									"                                                                            if(error){console.log(error)}\r",
									"                                                                            pm.test(\"can't extend expired loan\", function(){\r",
									"\r",
									"                                                                                if(response.code != 403 ) { \r",
									"                                                                                    sendDelete(0, deleteTable.length-1, true)\r",
									"                                                                                    pm.expect(response).to.have.status(403)\r",
									"                                                                                }\r",
									"                                                                                else{\r",
									"                                                                                    pm.expect(response).to.have.status(403)\r",
									"                                                                                    pm.expect(response).to.have.body(\"unauthorize extend, loan's endDate is expired\")\r",
									"\r",
									"                                                                                    const returnLoan = {\r",
									"                                                                                        url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/loans/return/\" + pm.variables.get(\"loanId\"),\r",
									"                                                                                        method: 'PUT',\r",
									"                                                                                        header: {\r",
									"                                                                                            'Content-Type': 'application/json',\r",
									"                                                                                            'Authorization': 'Bearer '+pm.variables.get(\"jwtAdminToken\")\r",
									"                                                                                        }\r",
									"                                                                                    }\r",
									"                                                                                    pm.sendRequest(returnLoan, (error, response)=>{\r",
									"                                                                                        if(error){console.log(error)}\r",
									"                                                                                        pm.test(\"return loan\", function (){\r",
									"                                                                                            if(response.code != 200 ) { \r",
									"                                                                                                sendDelete(0, deleteTable.length-1, true)\r",
									"                                                                                                pm.expect(response).to.have.status(200)\r",
									"                                                                                            }\r",
									"                                                                                            else{\r",
									"                                                                                                pm.expect(response).to.have.status(200)\r",
									"                                                                                                sendDelete(0, deleteTable.length-1) \r",
									"                                                                                            }\r",
									"                                                                                        })\r",
									"                                                                                    })\r",
									"                                                                                }\r",
									"                                                                            })\r",
									"                                                                        })\r",
									"                                                                    }\r",
									"                                                                })\r",
									"                                                            })\r",
									"                                                        }\r",
									"                                                    })\r",
									"                                                })\r",
									"                                            }\r",
									"                                        })\r",
									"                                    })\r",
									"                                }\r",
									"                            })\r",
									"                        })\r",
									"                    }\r",
									"                })\r",
									"            }) \r",
									"        }\r",
									"    })\r",
									"})\r",
									"     "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtAdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/loans/newLoan",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"loans",
								"newLoan"
							]
						}
					},
					"response": []
				},
				{
					"name": "reservation CRUD scenario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log admin (for unit test)\r",
									"const loginRequest = {\r",
									"    url: pm.environment.get(\"host\") + \"/authenticate\",\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": pm.environment.get(\"adminEmail\"),\r",
									"            \"password\": pm.environment.get(\"adminPass\")\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(loginRequest, (error, response) => {\r",
									"    if(error){console.log(error)}\r",
									"    pm.test(\"logAdmin\", function(){\r",
									"        pm.collectionVariables.set(\"jwtAdminToken\", response.json()[0])\r",
									"\r",
									"        //creer une copy d'un livre dans une library\r",
									"        const postLibrary = {\r",
									"            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/libraries/newLibrary\",\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"name\":\"postman library\",\r",
									"                    \"phoneNumber\":\"0725456895\",\r",
									"                    \"addressDto\":{\r",
									"                        \"number\":7,\r",
									"                        \"street\":\"road Danton\",\r",
									"                        \"zipCode\":59240,\r",
									"                        \"city\":\"Dunkirk\"\r",
									"                    }\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postLibrary, (error, response) => {\r",
									"            if(error){console.log(error)}\r",
									"            pm.test(\"create a library\", function(){\r",
									"                pm.expect(response).to.have.property(\"code\",201)\r",
									"                pm.variables.set(\"libraryId\", response.json().libraryId)\r",
									"\r",
									"                const postAuthor = {\r",
									"                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/authors/newAuthor\",\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"firstName\":\"Postman\",\r",
									"                            \"lastName\":\"For test\"\r",
									"                        })\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                pm.sendRequest(postAuthor, (error, response) => {\r",
									"                    if(error){console.log(error)}\r",
									"                    pm.test(\"create an author\", function(){\r",
									"                        pm.expect(response).to.have.property(\"code\", 201)\r",
									"                        pm.variables.set(\"authorId\", response.json().authorId)\r",
									"\r",
									"                        const postBook = {\r",
									"                            url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/books/newBook\",\r",
									"                            method: 'POST',\r",
									"                            header: {\r",
									"                                'Content-Type': 'application/json',\r",
									"                                'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                            },\r",
									"                            body: {\r",
									"                                mode: 'raw',\r",
									"                                raw: JSON.stringify({\r",
									"                                    \"title\": \"Postman testBook\",\r",
									"                                    \"isbn\":9999,\r",
									"                                    \"summary\":\"Just a book for testing Api with Postman\",\r",
									"                                    \"authorDto\":{\r",
									"                                        \"authorId\":pm.variables.get(\"authorId\")\r",
									"                                    }\r",
									"                                })\r",
									"                            }\r",
									"                        }\r",
									"\r",
									"                        pm.sendRequest(postBook, (error, response) => {\r",
									"                            if(error){console.log(error)}\r",
									"                            pm.test(\"create a book\", function(){\r",
									"                                pm.expect(response).to.have.property(\"code\", 201)\r",
									"                                pm.variables.set(\"bookId\", response.json().bookId)\r",
									"\r",
									"                            const postCopy = {\r",
									"                                    url: pm.environment.get(\"host\") + pm.environment.get(\"domain\") + \"/copies/newCopy\",\r",
									"                                    method: 'POST',\r",
									"                                    header: {\r",
									"                                        'Content-Type': 'application/json',\r",
									"                                        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                                    },\r",
									"                                    body: {\r",
									"                                        mode: 'raw',\r",
									"                                        raw: JSON.stringify({\r",
									"                                            \"available\":1,\r",
									"                                            \"bookDto\":{\r",
									"                                                \"bookId\": pm.variables.get(\"bookId\")\r",
									"                                            },\r",
									"                                            \"libraryDto\":{\r",
									"                                                \"libraryId\": pm.variables.get(\"libraryId\")\r",
									"                                            }\r",
									"                                        })\r",
									"                                    }\r",
									"                                } \r",
									"                                pm.sendRequest(postCopy, (error, response)=>{\r",
									"                                    if(error){console.log(error)}\r",
									"                                    pm.test(\"create a copy for the book\", function(){\r",
									"                                        pm.expect(response).to.have.status(201)\r",
									"                                        pm.variables.set(\"copyId\", response.json().id)\r",
									"\r",
									"                                        pm.test(\"create 4 users\", function(){\r",
									"                                            var usersTable = [{}, {}, {}, {}];\r",
									"                                            usersTable.forEach((user, i) => {\r",
									"                                                const postCustomer = {\r",
									"                                                    url: pm.environment.get(\"host\") + \"/register/customer\",\r",
									"                                                    method: 'POST',\r",
									"                                                    header: {\r",
									"                                                        'Content-Type': 'application/json',\r",
									"                                                        'Authorization': 'Bearer ' + pm.collectionVariables.get('jwtAdminToken')\r",
									"                                                    },\r",
									"                                                    body: {\r",
									"                                                        mode: 'raw',\r",
									"                                                        raw: JSON.stringify({\r",
									"                                                            \"lastName\":\"testApi lastname user\" + i,\r",
									"                                                            \"firstName\":\"testAPI firstname user\" + i,\r",
									"                                                            \"email\":\"test\"+i+\"@postman.com\",\r",
									"                                                            \"password\":\"password\",\r",
									"                                                            \"addressDto\":{\r",
									"                                                                \"number\":7,\r",
									"                                                                \"street\":\"road Danton\",\r",
									"                                                                \"zipCode\":59240,\r",
									"                                                                \"city\":\"Dunkirk\"\r",
									"                                                            }\r",
									"                                                        })\r",
									"                                                    }\r",
									"                                                }\r",
									"                                                pm.sendRequest(postCustomer, (error, response) => {\r",
									"                                                    if(error){console.log(error)}\r",
									"                                                    pm.test(\"create customer\"+i, function(){\r",
									"                                                        pm.expect(response).to.have.status(201)\r",
									"                                                        var userData = {data:response.json(), userToken:\"\"}\r",
									"\r",
									"                                                        loginRequest.body.raw = JSON.stringify({\r",
									"                                                            \"username\": \"test\"+i+\"@postman.com\",\r",
									"                                                            \"password\": \"password\"\r",
									"                                                        })\r",
									"                                                        pm.sendRequest(loginRequest, (error, response) => {\r",
									"                                                            if(error){console.log(error)}\r",
									"                                                            pm.test(\"login user\"+i, function(){\r",
									"                                                                pm.expect(response).to.have.status(200)\r",
									"                                                                userData.userToken = response.json()[0]\r",
									"                                                                usersTable[i] = userData\r",
									"                                                            })\r",
									"                                                        })\r",
									"                                                    })\r",
									"                                                })\r",
									"                                            })\r",
									"                                            pm.variables.set(\"usersTable\", usersTable)\r",
									"                                        })\r",
									"                                    })\r",
									"                                })\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const HOST_DOMAIN = pm.environment.get(\"host\") + pm.environment.get(\"domain\")\r",
									"const URL_POST_RSV =  HOST_DOMAIN +  \"/reservations/new\"\r",
									"const URL_DELETE_RSV = HOST_DOMAIN + \"/reservations/cancel/\"\r",
									"\r",
									"const URL_POST_LOAN =  HOST_DOMAIN + \"/loans/newLoan\"\r",
									"const URL_RETURN_LOAN = HOST_DOMAIN + \"/loans/return/\"\r",
									"\r",
									"const URL_GET_USER = HOST_DOMAIN + \"/users/\"\r",
									"\r",
									"var deleteTable = []\r",
									"/*\r",
									"let requestUnderTest = {\r",
									"    method : undefined,\r",
									"    url : undefined,\r",
									"    urlParam : undefined,\r",
									"    token : undefined,\r",
									"    body : undefined,\r",
									"\r",
									"    RequestUnderTest : function(url, method, token, urlParam = undefined, bodyRaw = undefined){\r",
									"        this.method = method\r",
									"        this.url = url,\r",
									"        this.urlParam = urlParam,\r",
									"        this.token = token,\r",
									"        this.bodyRaw = bodyRaw\r",
									"    },\r",
									"\r",
									"    buildRequest : function (){\r",
									"        var body = bodyRaw ? {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify(bodyRaw)\r",
									"            } : undefined\r",
									"        var r =  {\r",
									"            url : urlParam ? url + \"/\" + urlParam : url,\r",
									"            method: method,\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': 'Bearer ' + token\r",
									"            },\r",
									"            body : body\r",
									"        }\r",
									"    }\r",
									"}\r",
									"*/\r",
									"function buildRequest(u, m, token, bodyRaw = undefined, bodyMode = undefined ){\r",
									"    return {\r",
									"        url :u,\r",
									"        method: m,\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token\r",
									"        },\r",
									"        body : bodyRaw != undefined ? {\r",
									"            mode: bodyMode == undefined ? 'raw' : bodyMode,\r",
									"            raw: JSON.stringify(bodyRaw)\r",
									"        } : undefined\r",
									"    }\r",
									"}\r",
									"function sendDelete(index, maxIndex){\r",
									"   // if(needReturnBefore && deleteTable[index].name == \"loan\"){\r",
									"    if(deleteTable[index].name == \"loan\" && !deleteTable[index].returned ){\r",
									"        pm.sendRequest(\r",
									"            buildRequest(\r",
									"                URL_RETURN_LOAN + deleteTable[index].id,\r",
									"                \"PUT\",\r",
									"                pm.variables.get(\"jwtAdminToken\")\r",
									"            ), (error, response)=>{\r",
									"                if(error){console.log(error)}\r",
									"                pm.test(\"return loan\", function (){\r",
									"                    pm.expect(response).to.have.status(200)\r",
									"                    deleteTable[index].returned = true\r",
									"                    sendDelete(index, maxIndex)\r",
									"                })\r",
									"            }\r",
									"        )\r",
									"    }\r",
									"    else if(pm.variables.has(deleteTable[index].name + \"Id\") == true){\r",
									"        pm.sendRequest(\r",
									"            buildRequest(\r",
									"                pm.environment.get(\"host\") + pm.environment.get(\"domain\") + deleteTable[index].endPoint + deleteTable[index].id,\r",
									"                \"DELETE\",\r",
									"                pm.variables.get(\"jwtAdminToken\")\r",
									"            ), (error, response) => {\r",
									"                if(error){console.log(error)}\r",
									"                testDelete(response, deleteTable[index].name, index, maxIndex)\r",
									"            }\r",
									"        )\r",
									"    }\r",
									"}\r",
									"\r",
									"function testDelete(res, name, index, maxIndex){\r",
									"    pm.test(\"delete \" + name, function(){\r",
									"        pm.expect(res).to.have.status(200)\r",
									"        if(index < maxIndex){\r",
									"            sendDelete(index+1, maxIndex)\r",
									"        }\r",
									"    })\r",
									"}\r",
									"\r",
									"pm.test(\"check if the necessary data is initialized\", function(){\r",
									"    pm.variables.get(\"usersTable\").forEach((user, i) =>{\r",
									"        pm.expect(\"test\"+i+\"@postman.com\").to.equals(user.data.email)\r",
									"        deleteTable.unshift({name:\"user\", endPoint:\"/users/delete/\", id:user.data.userId})\r",
									"    })\r",
									"    //check other and add to deleteTable\r",
									"    pm.expect(pm.variables.has(\"libraryId\")).to.equal(true);\r",
									"        deleteTable.unshift({name:\"library\", endPoint:\"/libraries/delete/\", id:pm.variables.get(\"libraryId\")})\r",
									"    pm.expect(pm.variables.has(\"authorId\")).to.equal(true);\r",
									"        deleteTable.unshift({name:\"author\", endPoint:\"/authors/delete/\", id:pm.variables.get(\"authorId\")})\r",
									"    pm.expect(pm.variables.has(\"bookId\")).to.equal(true);\r",
									"        deleteTable.unshift({name:\"book\", endPoint:\"/books/delete/\", id:pm.variables.get(\"bookId\")})\r",
									"    pm.expect(pm.variables.has(\"copyId\")).to.equal(true);\r",
									"        deleteTable.unshift({name:\"copy\", endPoint:\"/copies/delete/\", id:pm.variables.get(\"copyId\")})\r",
									"/*\r",
									"    pm.expect(pm.variables.has(\"loanId\")).to.equal(true);\r",
									"        deleteTable.unshift({name:\"loan\", endPoint:\"/loans/delete/\", id:pm.variables.get(\"loanId\")})\r",
									"*/\r",
									"    pm.test(\"missing user param\", function(){\r",
									"        pm.response.to.have.status(404)\r",
									"        pm.response.to.have.body(\"user param is required\")\r",
									"\r",
									"        pm.sendRequest(\r",
									"            buildRequest(URL_POST_RSV, \"POST\", pm.variables.get(\"usersTable\")[0].userToken,\r",
									"                {\r",
									"                    \"userDto\":{ \r",
									"                        \"userId\":pm.variables.get(\"usersTable\")[0].data.userId\r",
									"                    }\r",
									"                }\r",
									"            ),(error, response)=>{\r",
									"            if(error){console.log(error)}\r",
									"            pm.test(\"missing book param\", function(){\r",
									"                pm.expect(response).to.have.status(404)\r",
									"                pm.expect(response).to.have.body(\"book param is required\")\r",
									"\r",
									"                //same request with modified body\r",
									"                let postRsv = buildRequest(URL_POST_RSV, \"POST\", pm.variables.get(\"usersTable\")[0].userToken,\r",
									"                    {\r",
									"                        \"userDto\":{\r",
									"                            \"userId\":pm.variables.get(\"usersTable\")[0].data.userId\r",
									"                        },\r",
									"                        \"bookDto\":{\r",
									"                            \"bookId\":pm.variables.get(\"bookId\")\r",
									"                        }\r",
									"                    }\r",
									"                )\r",
									"                pm.sendRequest(postRsv, (error, response)=>{\r",
									"                    if(error){console.log(error)}\r",
									"                    pm.test(\"can't reserve an available book\", function (){\r",
									"                        pm.expect(response).to.have.status(401)\r",
									"                        pm.expect(response).to.have.body(\"a copy for this book is available, reservation isn't enabled\")\r",
									"\r",
									"                        let postLoan =  buildRequest(\r",
									"                            URL_POST_LOAN,\r",
									"                            \"POST\",\r",
									"                            pm.variables.get(\"jwtAdminToken\"),\r",
									"                            {\r",
									"                                \"userDto\":{\r",
									"                                    \"userId\": pm.variables.get(\"usersTable\")[0].data.userId\r",
									"                                },\r",
									"                                \"copyDto\":{\r",
									"                                    \"id\": pm.variables.get(\"copyId\"),\r",
									"                                    \"bookDto\": {\r",
									"                                        \"bookId\": pm.variables.get(\"bookId\")\r",
									"                                    }\r",
									"                                } \r",
									"                            }\r",
									"                        )\r",
									"                        pm.sendRequest(postLoan, (error, response)=>{\r",
									"                            if(error){console.log(error)}\r",
									"                            pm.test(\"create a loan for the book\", function(){\r",
									"                                pm.expect(response).to.have.status(201)\r",
									"                                pm.variables.set(\"loanId\", response.json().id)\r",
									"                                deleteTable.unshift({name:\"loan\", endPoint:\"/loans/delete/\", id:pm.variables.get(\"loanId\"), returned:false})\r",
									"\r",
									"                                //send same postRsv\r",
									"                                pm.sendRequest(postRsv, (error, response)=>{\r",
									"                                    if(error){console.log(error)}\r",
									"                                    pm.test(\"can't reserve a copy the user have already loaned\", function(){\r",
									"                                        pm.expect(response).to.have.status(401)\r",
									"                                        pm.expect(response).to.have.body(\"this book is already loaned by this user\")\r",
									"\r",
									"                                        //create a rsv for ohter user (1)     \r",
									"                                        pm.sendRequest( \r",
									"                                            buildRequest(URL_POST_RSV, \"POST\", pm.variables.get(\"usersTable\")[1].userToken,\r",
									"                                                {\r",
									"                                                \"userDto\":{\r",
									"                                                    \"userId\":pm.variables.get(\"usersTable\")[1].data.userId\r",
									"                                                },\r",
									"                                                \"bookDto\":{\r",
									"                                                    \"bookId\":pm.variables.get(\"bookId\")\r",
									"                                                }\r",
									"                                            }\r",
									"                                        ), (error, response)=>{\r",
									"                                            if(error){console.log(error)}\r",
									"                                            pm.test(\"user\"+pm.variables.get(\"usersTable\")[1].data.userId + \" success reserve\", function(){\r",
									"                                                pm.expect(response).to.have.status(201)\r",
									"                                                pm.variables.set(\"reservation_1Id\", response.json().id)\r",
									"                                                deleteTable.unshift({name:\"reservation_1\", endPoint:\"/reservations/cancel/\", id:pm.variables.get(\"reservation_1Id\")})\r",
									"\r",
									"                                                //send same postRsv\r",
									"                                                pm.sendRequest(postRsv, (error, response)=>{\r",
									"                                                    if(error){console.log(error)}\r",
									"                                                    pm.test(\"can't reserve with same user\", function(){\r",
									"                                                        pm.expect(response).to.have.status(401)\r",
									"                                                        pm.expect(response).to.have.body(\"this book is already loaned by this user\")\r",
									"      \r",
									"                                                        //test can't delete book with reservation\r",
									"                                                        var deleteBookData = deleteTable.find(e => e.name == \"book\")\r",
									"                                                        pm.sendRequest(\r",
									"                                                            buildRequest(\r",
									"                                                                pm.environment.get(\"host\") + pm.environment.get(\"domain\") + deleteBookData.endPoint + deleteBookData.id,\r",
									"                                                                \"DELETE\",\r",
									"                                                                pm.variables.get(\"jwtAdminToken\")\r",
									"                                                            ), (error, response)=>{\r",
									"                                                            if(error){console.log(error)}\r",
									"                                                            pm.test(\"can't delete book with reservation\", function(){\r",
									"                                                                pm.expect(response).to.have.status(409)\r",
									"                                                                pm.expect(response).to.have.body(\"This book \" + deleteBookData.id + \" have existing reservation\")\r",
									"\r",
									"\r",
									"                                                                //create a rsv for other user (2)\r",
									"                                                                pm.sendRequest(\r",
									"                                                                    buildRequest(URL_POST_RSV, \"POST\", pm.variables.get(\"usersTable\")[2].userToken,\r",
									"                                                                        {\r",
									"                                                                            \"userDto\":{\r",
									"                                                                                \"userId\":pm.variables.get(\"usersTable\")[2].data.userId\r",
									"                                                                            },\r",
									"                                                                            \"bookDto\":{\r",
									"                                                                                \"bookId\":pm.variables.get(\"bookId\")\r",
									"                                                                            }\r",
									"                                                                        }\r",
									"                                                                    ), (error, response)=>{\r",
									"                                                                    if(error){console.log(error)}\r",
									"                                                                    pm.test(\"user\"+pm.variables.get(\"usersTable\")[2].data.userId + \" success reserve\", function(){\r",
									"                                                                        pm.expect(response).to.have.status(201)\r",
									"                                                                        pm.variables.set(\"reservation_2Id\", response.json().id)\r",
									"                                                                        deleteTable.unshift({name:\"reservation_2\", endPoint:\"/reservations/cancel/\", id:pm.variables.get(\"reservation_2Id\")})\r",
									"\r",
									"                                                                        //test max reserve exception with other user (3)\r",
									"                                                                        pm.sendRequest(\r",
									"                                                                            buildRequest(URL_POST_RSV, \"POST\", pm.variables.get(\"usersTable\")[3].userToken,\r",
									"                                                                                {\r",
									"                                                                                    \"userDto\":{\r",
									"                                                                                        \"userId\":pm.variables.get(\"usersTable\")[3].data.userId\r",
									"                                                                                    },\r",
									"                                                                                    \"bookDto\":{\r",
									"                                                                                        \"bookId\":pm.variables.get(\"bookId\")\r",
									"                                                                                    }\r",
									"                                                                                }\r",
									"                                                                            ), (error, response)=>{\r",
									"                                                                            if(error){console.log}\r",
									"                                                                            pm.test(\"can't reserve because reservation list is full\", function(){\r",
									"                                                                                pm.expect(response).to.have.status(401)\r",
									"                                                                                pm.expect(response).to.have.body(\"reservation list is full for this book\")\r",
									"\r",
									"                                                                            //loan returned by user\r",
									"                                                                                pm.sendRequest(\r",
									"                                                                                    buildRequest(\r",
									"                                                                                        URL_RETURN_LOAN + pm.variables.get(\"loanId\"), \r",
									"                                                                                        \"PUT\", \r",
									"                                                                                        pm.collectionVariables.get(\"jwtAdminToken\") \r",
									"                                                                                    ), (error, response)=>{\r",
									"                                                                                    if(error){console.log(error)}\r",
									"                                                                                    pm.test(\"return loan to active first reservation\", function(){\r",
									"                                                                                        pm.expect(response).to.have.status(200)\r",
									"                                                                                        \r",
									"                                                                                        //replace the loan returned by itself with returned at true in deleteTable\r",
									"                                                                                        deleteTable.splice(deleteTable.findIndex( e => e.id == pm.variables.get(\"loanId\")),\r",
									"                                                                                            1,\r",
									"                                                                                            {name:\"loan\", endPoint:\"/loans/delete/\", id:response.json().id, returned:true}\r",
									"                                                                                        )\r",
									"\r",
									"                                                                                        pm.sendRequest(\r",
									"                                                                                            buildRequest(\r",
									"                                                                                                URL_GET_USER + pm.variables.get(\"usersTable\")[1].data.userId, \r",
									"                                                                                                \"GET\", \r",
									"                                                                                                pm.collectionVariables.get(\"jwtAdminToken\") \r",
									"                                                                                            ), (error, response)=>{\r",
									"                                                                                            if(error){console.log(error)}\r",
									"                                                                                            pm.test(\"check if first reservation is active\", function(){\r",
									"                                                                                                pm.expect(response).to.have.status(200)\r",
									"                                                                                                var jsonData = response.json()\r",
									"                                                                                                var userRsv = jsonData.reservationDtos.find(r => r.id == pm.variables.get(\"reservation_1Id\"))\r",
									"                                                                                                pm.expect(userRsv).not.to.equal(\"undefined\")\r",
									"                                                                                                pm.expect(userRsv).to.have.property(\"active\", true)\r",
									"                            \r",
									"                                                                                                //try loan a reserved book (same postLoan than before)\r",
									"                                                                                                pm.sendRequest(postLoan, (error, response)=>{\r",
									"                                                                                                    if(error){console.log(error)}\r",
									"                                                                                                    pm.test(\"can't loan a resserved book\", function(){\r",
									"                                                                                                        pm.expect(response).to.have.status(401)\r",
									"                                                                                                        pm.expect(response).to.have.body(\"loan can't be accept, the book is reserved\")\r",
									"\r",
									"                                                                                                        //cancel reservation fo user (1)\r",
									"                                                                                                        pm.sendRequest(\r",
									"                                                                                                            buildRequest(\r",
									"                                                                                                                URL_DELETE_RSV + pm.variables.get(\"reservation_1Id\"),\r",
									"                                                                                                                \"DELETE\",\r",
									"                                                                                                                pm.variables.get(\"usersTable\")[1].userToken\r",
									"                                                                                                            ),(error, response)=>{\r",
									"                                                                                                                if(error){console.log(error)}\r",
									"                                                                                                                pm.test(\"user\"+pm.variables.get(\"usersTable\")[1].data.userId + \" success cancel reservation\", function(){\r",
									"                                                                                                                    pm.expect(response).to.have.status(200)\r",
									"\r",
									"                                                                                                                    //remove deleted rsv from deleteTable\r",
									"                                                                                                                    deleteTable.splice(\r",
									"                                                                                                                        deleteTable.findIndex( e => e.id == pm.variables.get(\"reservation_1Id\"))\r",
									"                                                                                                                        , 1\r",
									"                                                                                                                    )\r",
									"\r",
									"                                                                            let getUser2 = buildRequest(\r",
									"                                                                                URL_GET_USER + pm.variables.get(\"usersTable\")[2].data.userId, \r",
									"                                                                                \"GET\", \r",
									"                                                                                pm.collectionVariables.get(\"jwtAdminToken\") \r",
									"                                                                            )\r",
									"                                                                            pm.sendRequest(getUser2, (error, response)=>{\r",
									"                                                                                    if(error){console.log(error)}\r",
									"                                                                                    pm.test(\"check if second reservation is active\", function(){\r",
									"                                                                                        pm.expect(response).to.have.status(200)\r",
									"                                                                                        var jsonData = response.json()\r",
									"                                                                                        var userRsv = jsonData.reservationDtos.find(r => r.id == pm.variables.get(\"reservation_2Id\"))\r",
									"                                                                                        pm.expect(userRsv).not.to.equal(\"undefined\")\r",
									"                                                                                        pm.expect(userRsv).to.have.property(\"active\", true)\r",
									"\r",
									"                                                                                        pm.sendRequest(\r",
									"                                                                                            buildRequest(\r",
									"                                                                                                URL_POST_LOAN,\r",
									"                                                                                                \"POST\",\r",
									"                                                                                                pm.variables.get(\"jwtAdminToken\"),\r",
									"                                                                                                {\r",
									"                                                                                                    \"userDto\":{\r",
									"                                                                                                        \"userId\": pm.variables.get(\"usersTable\")[2].data.userId\r",
									"                                                                                                    },\r",
									"                                                                                                    \"copyDto\":{\r",
									"                                                                                                        \"id\": pm.variables.get(\"copyId\"),\r",
									"                                                                                                        \"bookDto\": {\r",
									"                                                                                                            \"bookId\": pm.variables.get(\"bookId\")\r",
									"                                                                                                        }\r",
									"                                                                                                    } \r",
									"                                                                                                }\r",
									"                                                                                            ), (error, response)=>{\r",
									"                                                                                                if(error){console.log(error)}\r",
									"                                                                                                pm.test(\"loan the book with the user who reserved it\", function(){\r",
									"                                                                                                    pm.expect(response).to.have.status(201)\r",
									"\r",
									"                                                                                                    //remove deleted rsv from deleteTable\r",
									"                                                                                                    deleteTable.splice(\r",
									"                                                                                                        deleteTable.findIndex( e => e.id == pm.variables.get(\"reservation_2Id\"))\r",
									"                                                                                                        , 1\r",
									"                                                                                                    )\r",
									"                                                                                                    //add new loan to deleteTable\r",
									"                                                                                                    deleteTable.unshift({name:\"loan\", endPoint:\"/loans/delete/\", id:response.json().id, returned:false})\r",
									"\r",
									"                                                                                                    pm.sendRequest(getUser2, (error, response)=>{\r",
									"                                                                                                        if(error){console.log(error)}\r",
									"                                                                                                        pm.test(\"check reservation was deleted cuz user who made reservation picked up the book so now it is a loan\", function(){\r",
									"                                                                                                            pm.expect(response).to.have.status(200)\r",
									"                                                                                                            var jsonData = response.json()\r",
									"                                                                                                            pm.expect(jsonData.reservationDtos.length).to.equal(0)\r",
									"\r",
									"console.log(deleteTable)\r",
									"                                                                                                            sendDelete(0, deleteTable.length-1)\r",
									"                                                                                                        })\r",
									"                                                                                                    })\r",
									"                                                                                                })\r",
									"                                                                                            }\r",
									"                                                                                        )\r",
									"                                                                                    })\r",
									"                                                                                }\r",
									"                                                                            )\r",
									"                                                                                                                })\r",
									"                                                                                                            }\r",
									"                                                                                                        )\r",
									"                                                                                                    })\r",
									"                                                                                                })\r",
									"                                                                                            })\r",
									"                                                                                        })\r",
									"                                                                                    })\r",
									"                                                                                })\r",
									"                                                                            })\r",
									"                                                                        })\r",
									"                                                                    })\r",
									"                                                                })\r",
									"                                                            })\r",
									"                                                        })\r",
									"                                                    })\r",
									"                                                })\r",
									"                                            })\r",
									"                                        })\r",
									"                                    })\r",
									"                                })\r",
									"                            })\r",
									"                        })\r",
									"                    })\r",
									"                })\r",
									"            })\r",
									"        })\r",
									"    })\r",
									"\r",
									"\r",
									" //   sendDelete(0, deleteTable.length-1, true) \r",
									"\r",
									"//create resa \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwtAdminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{domain}}/reservations/new",
							"host": [
								"{{host}}{{domain}}"
							],
							"path": [
								"reservations",
								"new"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwtToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "jwtAdminToken",
			"value": ""
		},
		{
			"key": "userId",
			"value": "null",
			"type": "string"
		}
	]
}
