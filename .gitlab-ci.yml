#image: aritrasasmal/maven-mysql-java
#image: zhangpin/docker-maven-mysql-vipkid
image: maven:3.8.4-jdk-11

cache:
  paths:
    - "**/.m2/repository"

services:
  - name: mysql:8.0
    command: [ "--default-authentication-plugin=mysql_native_password" ]

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  #config maven pour stocker le repository dans un emplacement connu
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

  MYSQL_ROOT_PASSWORD: rootPass
  MYSQL_USER: usr_lib10
#  MYSQL_PASSWORD: secret
  MYSQL_DATABASE: LIB10
  MYSQL_HOST: mysql

  POSTMAN_COLLECTION : Lib10_testing.postman_collection.json
  POSTMAN_ENVIRONMENT: localhost.postman_environment.json

stages:
#  - build
  - test
 # - build
  - test-api
#  - integration-test

.init-db: &init-db
  #connexion et test de connexion
  - echo "SELECT 'OK';" | mysql --user=root --password="${MYSQL_ROOT_PASSWORD}" --host=mysql "${MYSQL_DATABASE}"

  - mysql --user=root --password="${MYSQL_ROOT_PASSWORD}" --host=mysql < ./docker/dev/init/db/docker-entrypoint-initdb.d/01_create_schema.sql
  - mysql --user=root --password="${MYSQL_ROOT_PASSWORD}" --host=mysql < ./docker/dev/init/db/docker-entrypoint-initdb.d/02_create_tables.sql
  - mysql --user=root --password="${MYSQL_ROOT_PASSWORD}" --host=mysql --database="${MYSQL_DATABASE}" < ./docker/dev/init/db/docker-entrypoint-initdb.d/21_insert_data_demo.sql

unit-test:
  stage: test
  services:
    - name: postman/newman:alpine
      entrypoint: [""]
  coverage: '/Total.*?([0â€“9]{1,3})%/'
 # needs:
  #  - job: build
  script:
    - cd Lib10/
    - mvn $MAVEN_CLI_OPTS test

    - mvn $MAVEN_CLI_OPTS compile
    - newman --version
   # - newman run ${POSTMAN_COLLECTION} -e ${POSTMAN_ENVIRONMENT}
    - newman run Lib10_testing.postman_collection.json -e localhost.postman_environment.json
    #remet a jour les dates de modif des fichiers .class pour eviter une recompilation
   # - find . -name "*.class" -exec touch {} \+
    #- docker build mvn $MAVEN_CLI_OPTS test
    
   # - mvn $MAVEN_CLI_OPTS compile
    ## remove for fast debug next stage
  artifacts:
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"
    expire_in: 1 hour
    paths:
      - "**/target" # for multi-modules project with directory root as a pom package type

#build:
#  stage: build
#  needs:
 #   - job: unit-test
 # services: 
    #- name: mysql:8.0
     # command: [ "--default-authentication-plugin=mysql_native_password" ]
#    - name: docker:latest
#  before_script:
#    - *init-db
#    - docker login registry.gitlab.com -u Gunm-prog -p ${p10_pat}
 # script:
 #   - cd Lib10/
    #- docker build mvn $MAVEN_CLI_OPTS compile
 #   - mvn $MAVEN_CLI_OPTS compile
    #- mvn compile
  #  - mvn verify
#    - docker build -t registry.Gunm-prog/P10-Tickets/t5-templates-db_app:$CI_COMMIT_REF_NAME --build-arg UID=$(id -u).
   # - docker build -t registry.Gunm-prog/P10-Tickets/t5-templates-db_app:$CI_COMMIT_REF_NAME --build-arg UID=$(id -u).
 # artifacts:
 #   expire_in: 1 hour
 #   paths:
  #    - '**/target' # for multi-modules project with directory root as a pom package type


api-test:
  stage: test-api
 # image: 
    #name: postman/newman:alpine
    #entrypoint: [""]
  services:
    - name: postman/newman:alpine
      entrypoint: [""]
  needs:
   # - job: build
    - job: unit-test
  before_script:
    - *init-db
  #  - docker login -u "$CI_REGISTRY_USER" -P "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - newman --version
    - newman run ${POSTMAN_COLLECTION} -e ${POSTMAN_ENVIRONMENT}
  artifacts:
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"
    expire_in: 1 hour
    paths:
      - "**/target" # for multi-modules project with directory root as a pom package type


